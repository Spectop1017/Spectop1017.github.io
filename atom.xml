<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Spectop's]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-28T16:24:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Spectop]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[markdown文档中mathjax的问题]]></title>
    <link href="http://yoursite.com/2016/01/29/markdown%E6%96%87%E6%A1%A3%E4%B8%ADmathjax%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/01/29/markdown文档中mathjax的问题/</id>
    <published>2016-01-28T16:03:10.000Z</published>
    <updated>2016-01-28T16:24:46.000Z</updated>
    <content type="html"><![CDATA[<p>在写markdown文档时经常会需要插入数学公式，我之前只会使用图片插入，上次在看到mathjax后，我开始了使用mathjax的历程，但在实际写文档的过程中遇到了一些问题。</p>
<a id="more"></a>
<h1 id="u5173_u4E8E_u6709_u4E00_u4E9B_u516C_u5F0F_u65E0_u6CD5_u6B63_u786E_u7684_u663E_u793A"><a href="#u5173_u4E8E_u6709_u4E00_u4E9B_u516C_u5F0F_u65E0_u6CD5_u6B63_u786E_u7684_u663E_u793A" class="headerlink" title="关于有一些公式无法正确的显示"></a>关于有一些公式无法正确的显示</h1><p>在写机器学习的文章中遇到的一个关于范数的公式写出来编辑器上显示没有问题，但是一旦放进文档里就不行了，这个问题困扰了我很长时间。</p>
<p>这是代码：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</span><br><span class="line">&gt; <span class="formula">$$ <span class="command">\lim</span>_<span class="special">&#123;</span>k<span class="command">\to</span><span class="command">\infty</span><span class="special">&#125;</span><span class="command">\left</span>( <span class="command">\sum</span>_<span class="special">&#123;</span>i=1<span class="special">&#125;</span>^n<span class="command">\mid</span> p_i-q_i<span class="command">\mid</span> ^k<span class="command">\right</span>)^<span class="command">\frac</span><span class="special">&#123;</span>1<span class="special">&#125;</span><span class="special">&#123;</span>k<span class="special">&#125;</span> $$</span></span><br></pre></td></tr></table></figure></p>
<p>这是效果：</p>
<blockquote>
<p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim<em>{k\to\infty}\left( \sum</em>{i=1}^n\mid p_i-q_i\mid ^k\right)^\frac{1}{k} $$</p>
</blockquote>
<p>这里haroopad显示的公式是正确的，但是hexo编译过后的网页显示就不对了。</p>
<p>把代码剪裁一下，看看什么样子的公式是可以的：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</span><br><span class="line">&gt; <span class="formula">$$ <span class="command">\lim</span>_<span class="special">&#123;</span>k<span class="command">\to</span><span class="command">\infty</span><span class="special">&#125;</span><span class="command">\left</span>( <span class="command">\sum</span>_i <span class="command">\right</span>) $$</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim_{k\to\infty}\left( \sum_i \right) $$</p>
</blockquote>
<p>这个好像就可以，但是貌似sum后面的i一旦加上花括号就不行：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</span><br><span class="line">&gt; <span class="formula">$$ <span class="command">\lim</span>_<span class="special">&#123;</span>k<span class="command">\to</span><span class="command">\infty</span><span class="special">&#125;</span><span class="command">\left</span>( <span class="command">\sum</span>_<span class="special">&#123;</span>i<span class="special">&#125;</span> <span class="command">\right</span>) $$</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim<em>{k\to\infty}\left( \sum</em>{i} \right) $$</p>
</blockquote>
<p>于是我点开了两个网页的源代码，定位到这一行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<span class="tag">&lt;<span class="title">br</span>&gt;</span>$$ \lim<span class="tag">&lt;<span class="title">em</span>&gt;</span>&#123;k\to\infty&#125;\left( \sum<span class="tag">&lt;/<span class="title">em</span>&gt;</span>&#123;i&#125; \right) $$<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<span class="tag">&lt;<span class="title">br</span>&gt;</span>$$ \lim_&#123;k\to\infty&#125;\left( \sum_i \right) $$<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现最明显的不同就算lim后面的 <code>&lt;em&gt;</code>，这时我们注意到，hexo在编译的时候将lim和sum后面的下划线 _翻译成强调的 <code>&lt;em&gt;</code> 了，仔细观察前面的公式，确实可以发现一部分变成了斜体。所以我们要在所有的下划线 _ 前面加上 \ 转义就可以了。</p>
<p><strong>OK，搞定</strong></p>
<h3 id="p-s__u6211_u7684chrome_u4E0A_u663E_u793A_u7684_u516C_u5F0F_u540E_u9762_u90FD_u6709_u4E00_u4E2A_u7AD6_u7EBF_uFF0Cfirefox_u6CA1_u6709_uFF0C_u5185_u5565_uFF0C_u4E00_u822C_u5E73_u65F6_u7528chrome_u4E60_u60EF_uFF0C_u6240_u4EE5_u6709_u4EBA_u77E5_u9053_u600E_u4E48_u5F04_u54A9_uFF1F"><a href="#p-s__u6211_u7684chrome_u4E0A_u663E_u793A_u7684_u516C_u5F0F_u540E_u9762_u90FD_u6709_u4E00_u4E2A_u7AD6_u7EBF_uFF0Cfirefox_u6CA1_u6709_uFF0C_u5185_u5565_uFF0C_u4E00_u822C_u5E73_u65F6_u7528chrome_u4E60_u60EF_uFF0C_u6240_u4EE5_u6709_u4EBA_u77E5_u9053_u600E_u4E48_u5F04_u54A9_uFF1F" class="headerlink" title="p.s 我的chrome上显示的公式后面都有一个竖线，firefox没有，内啥，一般平时用chrome习惯，所以有人知道怎么弄咩？"></a>p.s 我的chrome上显示的公式后面都有一个竖线，firefox没有，内啥，一般平时用chrome习惯，所以有人知道怎么弄咩？</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>在写markdown文档时经常会需要插入数学公式，我之前只会使用图片插入，上次在看到mathjax后，我开始了使用mathjax的历程，但在实际写文档的过程中遇到了一些问题。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[「学习笔记」机器学习(1)]]></title>
    <link href="http://yoursite.com/2016/01/22/%E3%80%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8D%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://yoursite.com/2016/01/22/「学习笔记」机器学习-1/</id>
    <published>2016-01-22T06:32:57.000Z</published>
    <updated>2016-03-03T03:03:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-__u79D1_u5B66_u7B97_u6CD5_u5E93_u7684_u5B89_u88C5_28linux_29"><a href="#1-__u79D1_u5B66_u7B97_u6CD5_u5E93_u7684_u5B89_u88C5_28linux_29" class="headerlink" title="1. 科学算法库的安装(linux)"></a>1. 科学算法库的安装(linux)</h1><p></p><p><br><a id="more"></a></p>
<ul>
<li>1.安装Numpy<pre><code>sudo apt-get install python-numpy
</code></pre></li>
<li>2.安装Scipy<pre><code>sudo apt-get install python-numpy
</code></pre></li>
<li>3.Matplotlib<pre><code>sudo apt-get install tk-dev
sudo apt-get install python-gtk2-dev
sudo apt-get install python-pyside
</code></pre></li>
<li>4.spyder GUI环境<pre><code>sudo apt-get install spyder
</code></pre></li>
</ul>
<p><br></p>
<ul>
<li><p><strong>上述安装完毕后，可以利用</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">4</span>*<span class="number">3.1415</span>,<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line">plt.plot(x,y,label=<span class="string">"$sin(x)$"</span>,color=<span class="string">"red"</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>进行测试。若生成正弦曲线窗口，则配置完成. </strong></p>
</li>
</ul>
<h1 id="2-_NumPy_u7684_u57FA_u672C_u64CD_u4F5C"><a href="#2-_NumPy_u7684_u57FA_u672C_u64CD_u4F5C" class="headerlink" title="2. NumPy的基本操作"></a>2. NumPy的基本操作</h1><ul>
<li><h2 id="1-_Numpy__u7684_u5BFC_u5165"><a href="#1-_Numpy__u7684_u5BFC_u5165" class="headerlink" title="1. Numpy 的导入"></a>1. Numpy 的导入</h2><pre><code>import numpy as np
</code></pre><p>  这种写法在使用相关函数的时候需要写明是哪个包的，如:</p>
<pre><code>myZero = np.zeros([3,5])
</code></pre><p>  还可以导入包全局使用</p>
<pre><code>from numpy import *
</code></pre></li>
</ul>
<ul>
<li><h2 id="2-_NumPy__u7684_u57FA_u672C_u64CD_u4F5C"><a href="#2-_NumPy__u7684_u57FA_u672C_u64CD_u4F5C" class="headerlink" title="2. NumPy 的基本操作"></a>2. NumPy 的基本操作</h2><ol>
<li><p>创建全0矩阵和全1矩阵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myZero = zeros([n,m])</span><br><span class="line">myOne = ones([n,m])</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成随机矩阵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myRand = random.rand(n,m)   <span class="comment"># n 行 m 列的 0～1 之间的随机数矩阵</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成单位矩阵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myEye = eye(n)   <span class="comment"># n * n 的单位阵</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将一个数组转化为一个矩阵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myMatrix = mat([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵所有元素求和</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = sum(myMatrix)</span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵各元素的乘积</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix = multiply(matrix1, matrix2) <span class="comment"># matrix1 和 matrix2 对应元素相乘的矩阵</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>求矩阵的 n 次幂</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix = power(myMatrix, n) <span class="comment">#生成一个矩阵，矩阵内部的元素是原矩阵对应元素的n次幂</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵的转置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> matrix.T   <span class="comment">#打印转置后的矩阵，不改变原矩阵</span></span><br><span class="line">matrix.transpose()   <span class="comment">#同上</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵的其他操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[m, n] = shape(matrix) <span class="comment"># m, n为矩阵的行列数</span></span><br><span class="line">myscl1 = matrix[<span class="number">0</span>] <span class="comment"># 矩阵的切片操作，取第一行</span></span><br><span class="line">myscl2 = matrix.T[<span class="number">0</span>] <span class="comment"># 矩阵的切片操作，取第一列</span></span><br><span class="line">mycpmat = matrix.copy() <span class="comment"># 矩阵的复制</span></span><br><span class="line"><span class="keyword">print</span> matrix1 &lt; matrix2 <span class="comment"># 矩阵的比较，会逐一比较对应的每一个元素，并输出一个仅包含True, False 的相同大小的矩阵</span></span><br><span class="line">dot(m1,m2)  <span class="comment">#计算m1,m2的点积</span></span><br><span class="line">norm(v)  <span class="comment">#计算向量V的范数</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h2 id="3-_Linalg_u7EBF_u6027_u4EE3_u6570_u5E93"><a href="#3-_Linalg_u7EBF_u6027_u4EE3_u6570_u5E93" class="headerlink" title="3. Linalg线性代数库"></a>3. Linalg线性代数库</h2><ol>
<li><p>矩阵的行列式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> linalg.det(matrix)</span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵的逆</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> linalg.inv(matrix)</span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵的对称</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> matrix * matrix.T</span><br></pre></td></tr></table></figure>
</li>
<li><p>矩阵的秩</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> linalg.matrix_rank(A)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可逆矩阵求解</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> linalg.solve(A,b.T) <span class="comment"># 如果b已经是一列的就不用转置了</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h2 id="4-__u5404_u7C7B_u8DDD_u79BB_u7684python_u5B9E_u73B0"><a href="#4-__u5404_u7C7B_u8DDD_u79BB_u7684python_u5B9E_u73B0" class="headerlink" title="4. 各类距离的python实现"></a>4. 各类距离的python实现</h2><p>   <strong>各类距离会在后面说明</strong></p>
<ol>
<li><p>Euclidean Distance</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> sqrt((vector1-vector2)*(vector1-vector2).T)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Manhattan Distance</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> sum(abs(vector1-vector2))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Chebyshev Distance</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> abs(vector1-vector2).max()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Cosine</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cosV12 = dot(vector1,vector2)/(linalg.norm(vector1)*linalg.norm(vector2))</span><br><span class="line"><span class="keyword">print</span> cosV12</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hamming Distance</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matV = mat([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">smstr = nonzero(matV[<span class="number">0</span>] - matV[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">print</span> shape(smstr[<span class="number">0</span>])[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Jaccard Distance</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.spatial.distance <span class="keyword">as</span> dist</span><br><span class="line">matV = mat([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="keyword">print</span> dist.pdist(matV, <span class="string">'jaccard'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h1 id="3-__u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u7840"><a href="#3-__u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u7840" class="headerlink" title="3. 机器学习的数学基础"></a>3. 机器学习的数学基础</h1><ul>
<li><strong>范数</strong><blockquote>
<p>向量的范数可以简单、形象的理解为<strong>向量的长度</strong>，或者向量到坐标系原点的距离，或者<strong>相应空间内的两点之间的距离</strong></p>
<p><strong><em>向量的范数定义</em></strong> : 向量的范数是一个函数 $ \parallel x\parallel $ ,满足非负性 $ \parallel x\parallel &gt; 0 $ , 齐次性 $ \parallel cx\parallel = \mid c\mid\parallel x\parallel $ ,三角不等式 $ \parallel x+y\parallel \leq\parallel x\parallel +\parallel y\parallel $ 。</p>
<p>L1范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值之和。<br>L2范数：  $\parallel x\parallel $为 $ x $向量各个元素平方和的开方，又称 Euclidean 范数或者 Frobenius 范数。<br>Lp范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值 $ p $次方和的  $ 1\over p $ 次方<br>L $\infty $范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值最大的那个元素，如下：$$ \lim_{k\to\infty}\left( \sum_{i=1}^n\mid p_i-q_i\mid ^k\right)^\frac{1}{k}<br>$$</p>
</blockquote>
</li>
<li><strong>Minkowski Distance (闵可夫斯基距离)</strong><blockquote>
<p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义。<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 间的Minkowski距离定义为：<br>$$ d_{12}=\sqrt[p]{\sum_{k=1}^n(x_{1k}-x_{2k})^p} $$<br>其中p是一个变参数。</p>
<ul>
<li>当 p=1 时，就是 Manhattan Distance (曼哈顿距离)</li>
<li>当 p=2 时，就是 Euclidean Distance (欧氏距离)</li>
<li>当 $ p\to\infty $ 时，就是 Chebyshev Distance (切比雪夫距离)</li>
</ul>
</blockquote>
</li>
<li><strong>Euclideam Distance</strong><blockquote>
<p>欧氏距离（L2范数）是最易于理解的一种距离计算方法，源于欧氏空间的两点距离公式<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的欧氏距离：<br>$$ d_{12}=\sqrt{\sum_{k=1}^n(x_{1k}-x_{2k})^2} $$<br>表示为向量运算的形式：<br>$$ d_{12}=\sqrt{(A - B)(A - B)^T} $$</p>
</blockquote>
</li>
<li><strong>Manhattan Distance</strong><blockquote>
<p>曼哈顿距离（L1范数）可以理解为计算网格中两点路径的距离<br>二维平面两点 $ A(x_1,y_1) $ 和 $ B(x_2,y_2) $ 间的曼哈顿距离:<br>$$ d_{12}=\mid x_1-x_2\mid +\mid y_1-y_2\mid $$<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的曼哈顿距离：<br>$$ d_{12}=\sum_{k=1}^n\mid x_{1k}-x_{2k}\mid $$</p>
</blockquote>
</li>
<li><strong>Chebyshev Distance</strong><blockquote>
<p>切比雪夫距离类似与棋盘上国王从一点到另一点移动的最少次数，即 $ max(\mid x_1-x_2\mid,\mid y_1-y_2\mid) $<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的切比雪夫距离：<br>$$ d_{12}=max_i(\mid x_{1i}-x_{2i}\mid) $$<br>该公式的另一个等价公式：<br>$$ d_{12}=\lim_{k\to\infty}\left(\sum_{i=1}^n\mid x_{1i}-x_{2i}\mid^k\right)^\frac{1}{k} $$</p>
</blockquote>
</li>
<li><strong>Cosine</strong><blockquote>
<p>夹角余弦可以用来两个向量方向的差异，机器学习中借用这一概念来衡量样本之间的差异<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的夹角余弦：<br>$$ \cos\theta=\frac{AB}{\mid A\mid\mid B\mid} $$<br>即：<br>$$ \cos\theta=\frac{\sum_{k=1}^nx_{1k}x_{2k}}{\sqrt{\sum_{k=1}^nx_{1k}^2}\sqrt{\sum_{k=1}^nx_{2k}^2}} $$</p>
</blockquote>
</li>
<li><strong>Hamming Distance</strong><blockquote>
<p>汉明距离的定义：两个等长字符串s1,s2,将其中一个变成另一个需要的最小替换次数。<br>应用：信息编码（为了增强容错性，应使得编码间的最小汉明距离尽可能大）</p>
</blockquote>
</li>
<li><strong>Jaccard Similarity Coefficient(杰卡德相似系数)</strong><blockquote>
<p>杰卡德相似系数：两个集合A,B的交集元素在并集元素中所占的比例，用符号 $ J(A,B) $ 表示<br>$$ J(A,B)=\frac{\mid A\cap B\mid}{\mid A\cup B\mid} $$<br>杰卡德距：与杰卡德相似系数相反的概念：<br>$$ J_\delta(A,B)=1-J(A,B)=\frac{\mid A\cup B\mid-\mid A\cap B\mid}{\mid A\cup B\mid} $$</p>
</blockquote>
</li>
<li><p><strong>特征间的相关性</strong></p>
<blockquote>
<ol>
<li><p>相关系数与相关距离<br> 相关系数：<br> $$ \rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}=\frac{E((X-EX)(Y-EY))}{\sqrt{D(X)}\sqrt{D(Y)}} $$<br> 相关距离：<br> $$ D_{XY}=1-\rho_{XY} $$<br> python实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">featuremat = mat(...)  <span class="comment"># 初始化矩阵</span></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mv1 = mean(featuremat[<span class="number">0</span>])  <span class="comment"># 计算第一列的均值</span></span><br><span class="line">mv2 = mean(featuremat[<span class="number">1</span>])  <span class="comment"># 计算第二列的均值</span></span><br><span class="line"><span class="comment">#计算两列的标准差</span></span><br><span class="line">dv1 = std(featuremat[<span class="number">0</span>]) </span><br><span class="line">dv2 = std(featuremat[<span class="number">1</span>])</span><br><span class="line">corref = mean(multiply(featuremat[<span class="number">0</span>]-mv1,featuremat[<span class="number">1</span>]-mv2))/(dv1*dv2)</span><br><span class="line"><span class="keyword">print</span> corref  <span class="comment">#输出相关系数</span></span><br><span class="line"><span class="keyword">print</span> corrcoef(featuremat)  <span class="comment">#输出相关系数矩阵</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>马氏距离</p>
</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-__u79D1_u5B66_u7B97_u6CD5_u5E93_u7684_u5B89_u88C5_28linux_29"><a href="#1-__u79D1_u5B66_u7B97_u6CD5_u5E93_u7684_u5B89_u88C5_28linux_29" class="headerlink" title="1. 科学算法库的安装(linux)"></a>1. 科学算法库的安装(linux)</h1><p><p><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/01/22/hello-world/"/>
    <id>http://yoursite.com/2016/01/22/hello-world/</id>
    <published>2016-01-22T06:23:31.000Z</published>
    <updated>2016-01-22T06:23:31.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ 重写博客]]></title>
    <link href="http://yoursite.com/2016/01/22/%E9%87%8D%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/01/22/重写博客/</id>
    <published>2016-01-22T05:58:07.000Z</published>
    <updated>2016-01-22T06:23:18.000Z</updated>
    <content type="html"><![CDATA[<p>一件很不幸的事，我重装系统的时候好像忘了把hexo的文章备份下来，结果那些markdown文档就都呵呵了 TAT～</p>
<p><br></p>
<p>重新配置了一次hexo真的好麻烦，搞了半天，我真不知道我当时是怎么弄好的！</p>
<a id="more"></a>
<p><br></p>
<p>之前的那些文章我还没有md文档，不过我倒是把整个博客给clone下来保存好了，以后如果有时间还是会恢复的吧。</p>
<p><br></p>
<p>这么快就放假了，然而真心觉得2015有点对不起自己，对不起这一年的时间。不过怎么说呢，后悔是没有用的，毕竟人要往前看嘛。只是希望2016结束的时候我不要还是这样，还是说出同样的话。</p>
<p><br></p>
<h3 id="u518D_u4E0D_u52AA_u529B_u5C31_u8001_u4E86_uFF01"><a href="#u518D_u4E0D_u52AA_u529B_u5C31_u8001_u4E86_uFF01" class="headerlink" title="再不努力就老了！"></a>再不努力就老了！</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>一件很不幸的事，我重装系统的时候好像忘了把hexo的文章备份下来，结果那些markdown文档就都呵呵了 TAT～</p>
<p><br></p>
<p>重新配置了一次hexo真的好麻烦，搞了半天，我真不知道我当时是怎么弄好的！</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
